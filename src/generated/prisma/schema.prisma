// BiMentor Prisma Schema
// Supabase PostgreSQL database schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  mentee
  mentor
  admin
}

enum MentorType {
  individual
  corporate
}

enum MentorStatus {
  pending_verification
  verified
  suspended
}

enum BudgetRange {
  LOW_500
  MEDIUM_1000
  HIGH_PLUS
  UNDECIDED
}

enum TimePreference {
  WEEKDAY_EVENING
  WEEKEND
  FLEXIBLE
  WEEKDAYS_DAY
}

enum MeetingPreference {
  PLATFORM_INTERNAL
  ZOOM
  GOOGLE_MEET
  FLEXIBLE
}

// ============================================
// MAIN MODELS
// ============================================

model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  full_name     String
  role          UserRole
  password_hash String
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  mentee_profile            Mentee?
  mentor_profile            Mentor?
  user_consent              UserConsent?
  mentee_languages          MenteeLanguage[]
  mentee_interests          MenteeInterest[]
  mentee_priorities         MenteePriority[]
  mentor_languages          MentorLanguage[]
  mentor_categories         MentorCategory[]
  mentor_skills             MentorSkill[]
  mentee_service_focus      MenteeServiceFocus[]
  mentee_languages_ref      MenteeLanguageRef[]
  mentee_disciplines_ref    MenteeDisciplineRef[]
  mentee_preferences_ref    MenteePreferenceRef[]
  mentor_company_membership MentorCompanyMembership[]

  @@map("app_users")
}

model Mentee {
  user_id         String   @id @db.Uuid
  short_goal      String
  target_track    String
  budget          String
  time_preference String
  city            String?
  country         String   @default("Turkey")
  goal_type       String?
  service_focus   String?
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("mentees")
}

model Mentor {
  user_id            String       @id @db.Uuid
  mentor_type        MentorType
  display_name       String
  title              String
  years_experience   Int          @default(0)
  hourly_rate_cents  Int
  meeting_preference String
  bio_short          String
  bio_long           String
  city               String?
  country            String       @default("Turkey")
  rating_avg         Decimal      @default(0.00) @db.Decimal(3, 2)
  total_reviews      Int          @default(0)
  status             MentorStatus @default(pending_verification)
  created_at         DateTime     @default(now()) @db.Timestamptz(6)
  updated_at         DateTime     @updatedAt @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("mentors")
}

// ============================================
// REFERENCE TABLES
// ============================================

model ServiceFocusRef {
  id         String  @id
  label      String
  active     Boolean @default(true)
  sort_order Int     @default(0)

  // Relations
  mentee_service_focus MenteeServiceFocus[]

  @@map("service_focus_ref")
}

model LanguageRef {
  id         String  @id
  label      String
  active     Boolean @default(true)
  sort_order Int     @default(0)

  // Relations
  mentee_languages_ref MenteeLanguageRef[]

  @@map("language_ref")
}

model DisciplineRef {
  id         String  @id
  label      String
  active     Boolean @default(true)
  sort_order Int     @default(0)

  // Relations
  mentee_disciplines_ref MenteeDisciplineRef[]

  @@map("discipline_ref")
}

model PreferenceRef {
  id         String  @id
  label      String
  active     Boolean @default(true)
  sort_order Int     @default(0)

  // Relations
  mentee_preferences_ref MenteePreferenceRef[]

  @@map("preference_ref")
}

// ============================================
// JUNCTION TABLES
// ============================================

model MenteeLanguage {
  user_id   String @db.Uuid
  lang_code String

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, lang_code])
  @@map("mentee_languages")
}

model MenteeInterest {
  user_id    String   @db.Uuid
  interest   String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, interest])
  @@map("mentee_interests")
}

model MenteePriority {
  user_id    String   @db.Uuid
  priority   String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, priority])
  @@map("mentee_priorities")
}

model MentorLanguage {
  user_id   String @db.Uuid
  lang_code String

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, lang_code])
  @@map("mentor_languages")
}

model MentorCategory {
  user_id  String @db.Uuid
  category String

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, category])
  @@map("mentor_categories")
}

model MentorSkill {
  user_id String @db.Uuid
  skill   String

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, skill])
  @@map("mentor_skills")
}

// ============================================
// ENHANCED JUNCTION TABLES (REFERENCE BASED)
// ============================================

model MenteeServiceFocus {
  user_id          String @db.Uuid
  service_focus_id String

  // Relations
  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  service_focus ServiceFocusRef @relation(fields: [service_focus_id], references: [id], onDelete: Cascade)

  @@id([user_id, service_focus_id])
  @@map("mentee_service_focus")
}

model MenteeLanguageRef {
  user_id     String @db.Uuid
  language_id String

  // Relations
  user     User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  language LanguageRef @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@id([user_id, language_id])
  @@map("mentee_languages_ref")
}

model MenteeDisciplineRef {
  user_id       String @db.Uuid
  discipline_id String

  // Relations
  user       User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  discipline DisciplineRef @relation(fields: [discipline_id], references: [id], onDelete: Cascade)

  @@id([user_id, discipline_id])
  @@map("mentee_disciplines_ref")
}

model MenteePreferenceRef {
  user_id       String @db.Uuid
  preference_id String

  // Relations
  user       User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  preference PreferenceRef @relation(fields: [preference_id], references: [id], onDelete: Cascade)

  @@id([user_id, preference_id])
  @@map("mentee_preferences_ref")
}

// ============================================
// COMPANIES & CORPORATE MENTORS
// ============================================

model Company {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  website    String?
  tax_id     String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  mentor_company_membership MentorCompanyMembership[]

  @@map("companies")
}

model MentorCompanyMembership {
  mentor_id  String   @db.Uuid
  company_id String   @db.Uuid
  role_title String?
  work_email String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user    User    @relation(fields: [mentor_id], references: [id], onDelete: Cascade)
  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@id([mentor_id, company_id])
  @@map("mentor_company_membership")
}

// ============================================
// CONSENT & COMPLIANCE
// ============================================

model UserConsent {
  user_id          String   @id @db.Uuid
  kvkk_accepted_at DateTime @db.Timestamptz(6)
  kvkk_version     String?  @default("v1.0-tr-2025-10-10")
  ip_address       String?
  marketing_opt_in Boolean  @default(false)
  created_at       DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_consents")
}
